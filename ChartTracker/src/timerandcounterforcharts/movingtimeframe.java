/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timerandcounterforcharts;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Elizabeth
 */
public class movingtimeframe extends javax.swing.JFrame {

    private int count, time, rowsToRepeat;
    private Timer myClock;
    private TimerFormatter timeForm;

    /**
     * Creates new form movingtimeframe
     */
    public movingtimeframe() {
        initComponents();
        myClock = new Timer(1000, new TimerListener());
        timeForm = new TimerFormatter(0);
        count = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timerButton = new javax.swing.JToggleButton();
        timerDisplay = new javax.swing.JTextField();
        countSpinner = new javax.swing.JSpinner();
        rowsToRepeatField = new javax.swing.JTextField();
        onRowOfRepeatField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        alwaysOnTopButton = new javax.swing.JToggleButton();
        autoAdvanceButton = new javax.swing.JToggleButton();
        autoAdvanceAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chart Tracker");
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        timerButton.setText("Start");
        timerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerButtonActionPerformed(evt);
            }
        });

        timerDisplay.setText("00:00:00");
        timerDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerDisplayActionPerformed(evt);
            }
        });
        timerDisplay.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                timerDisplayPropertyChange(evt);
            }
        });

        countSpinner.setValue(1);
        countSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                countSpinnerStateChanged(evt);
            }
        });

        rowsToRepeatField.setText("4");

        onRowOfRepeatField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRowOfRepeatFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Rows Per Repeat");

        jLabel2.setText("On Row of Repeat");

        alwaysOnTopButton.setText("Always On Top");
        alwaysOnTopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwaysOnTopButtonActionPerformed(evt);
            }
        });

        autoAdvanceButton.setSelected(true);
        autoAdvanceButton.setText("Auto Advance By:");
        autoAdvanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoAdvanceButtonActionPerformed(evt);
            }
        });

        autoAdvanceAmount.setText("-30");
        autoAdvanceAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoAdvanceAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(alwaysOnTopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoAdvanceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(autoAdvanceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(timerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timerDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowsToRepeatField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onRowOfRepeatField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 19, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timerButton)
                    .addComponent(countSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsToRepeatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timerDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onRowOfRepeatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alwaysOnTopButton)
                    .addComponent(autoAdvanceButton)
                    .addComponent(autoAdvanceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onRowOfRepeatFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRowOfRepeatFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_onRowOfRepeatFieldActionPerformed

    private void timerDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerDisplayActionPerformed
        // TODO add your handling code here:
        try {
            int newTime = Integer.parseInt(timerDisplay.getText());
            timeForm.setTime(newTime);
        } catch (NumberFormatException ex) {
            String newTimeStr = timerDisplay.getText();
            timeForm.setTime(newTimeStr);
        }
        
        timerDisplay.setText(timeForm.getFormattedTime());
    }//GEN-LAST:event_timerDisplayActionPerformed

    private void timerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerButtonActionPerformed
        if (timerButton.isSelected()) {
            myClock.start();
            timerButton.setText("Pause");
            timerButton.setBackground(Color.red);
        } else {
            myClock.stop();
            timerButton.setText("Start");
            timerButton.setBackground(Color.green);
        }
    }//GEN-LAST:event_timerButtonActionPerformed

    private void autoAdvanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoAdvanceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_autoAdvanceButtonActionPerformed

    private void autoAdvanceAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoAdvanceAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_autoAdvanceAmountActionPerformed

    private void countSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_countSpinnerStateChanged
        System.out.println("count state changed");
        int newCount = (int) countSpinner.getValue();
        rowsToRepeat = Math.max(1, Integer.parseInt(rowsToRepeatField.getText()));
        int rowOfRepeat = (newCount % rowsToRepeat);
        if (rowOfRepeat == 0) {
            rowOfRepeat = rowsToRepeat;
        }
        if (autoAdvanceButton.isSelected()) {
            if (newCount > count) {
                if (rowOfRepeat != 1) {
                    this.setLocation(this.getX(), this.getY() + Integer.parseInt(autoAdvanceAmount.getText()));
                } else {
                    // go back to start of chart
                    this.setLocation(this.getX(), this.getY() - (rowsToRepeat - 1) * Integer.parseInt(autoAdvanceAmount.getText()));                  
                    
                }
            } else {
                if (rowOfRepeat != rowsToRepeat) {
                    this.setLocation(this.getX(), this.getY() - Integer.parseInt(autoAdvanceAmount.getText()));
                } else {
                    // go to the end of chart
                    rowOfRepeat = rowsToRepeat;
                    this.setLocation(this.getX(), this.getY() + (rowsToRepeat - 1) * Integer.parseInt(autoAdvanceAmount.getText()));
                }
            }
        }
        
        count = newCount;        
        
        
        onRowOfRepeatField.setText("" + rowOfRepeat);
    }//GEN-LAST:event_countSpinnerStateChanged

    private void alwaysOnTopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwaysOnTopButtonActionPerformed
        this.setAlwaysOnTop(alwaysOnTopButton.isSelected());
    }//GEN-LAST:event_alwaysOnTopButtonActionPerformed

    private void timerDisplayPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_timerDisplayPropertyChange

    }//GEN-LAST:event_timerDisplayPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(movingtimeframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(movingtimeframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(movingtimeframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(movingtimeframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new movingtimeframe().setVisible(true);
            }
        });
    }
    
    public class TimerListener implements ActionListener {

        public void actionPerformed(ActionEvent event) {
            
            timeForm.incTime();
            
            timerDisplay.setText(timeForm.getFormattedTime());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton alwaysOnTopButton;
    private javax.swing.JTextField autoAdvanceAmount;
    private javax.swing.JToggleButton autoAdvanceButton;
    private javax.swing.JSpinner countSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField onRowOfRepeatField;
    private javax.swing.JTextField rowsToRepeatField;
    private javax.swing.JToggleButton timerButton;
    private javax.swing.JTextField timerDisplay;
    // End of variables declaration//GEN-END:variables
}
